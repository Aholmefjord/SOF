using UnityEngine;
using System.Collections;

// Added into the Cubes generated by the GridSystem at runtime to control
public class CellSystem : MonoBehaviour
{
	// Public Variables
	public bool isOccupied = false;			// Furniture need to be of scale along the X and Z axis ending with .99
	public GameObject occupant = null;		// The furniture currently taking up this cell

	// Private Variables
	private Vector3 originalPosition;		// Store the furniture inside's current position
	private Quaternion originalRotation;	// Store the furniture inside's current rotation
	private MeshRenderer meshRenderer;		// Store the cell's Mesh Renderer
	private Color originalColor;			// Store the cell's original material color

	// Use this for initialization
	void Start ()
	{
		
	}
	
	// Called before Start
	void Awake()
	{
		// Get the cell's Mesh Renderer
		meshRenderer = GetComponent<MeshRenderer>();

		// Get the cell's Mesh Renderer's original color
		originalColor = meshRenderer.material.color;
	}

	// Update is called once per frame
	void Update ()
	{
		// OnTriggerExit doesn't work
		if (isOccupied)
		{
			if (occupant.transform.position != originalPosition)
			{
				isOccupied = false;
				occupant = null;

				// Set the grid back to it's original color if it's vacanted
				meshRenderer.material.color = originalColor;
			}
		}
	}

	// When something with a Collider & Rigidbody enters
	void OnTriggerEnter(Collider other)
	{
		if (other.tag == "Editables" && isOccupied == false)
		{
			// Set this cell to be occupied
			isOccupied = true;

			// Set the cell's occupant
			occupant = other.gameObject;
			originalPosition = occupant.transform.position;
			originalRotation = occupant.transform.rotation;

			// Set the grid to grey if something is occupying it
			meshRenderer.material.color = Color.grey;
		}
	}
}